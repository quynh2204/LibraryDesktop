// <auto-generated />
using System;
using LibraryDesktop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryDesktop.Data.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("LibraryDesktop.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalChapters")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Elena Moonstone",
                            CategoryId = 1,
                            CoverImageUrl = "Assets/0d080b47aaa3ab11160e60091f5ecbb7.jpg",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A magical journey through an ancient forest filled with mystical creatures and forgotten secrets.",
                            Price = 15.99m,
                            Status = 1,
                            Title = "The Enchanted Forest",
                            TotalChapters = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Sarah Martinez",
                            CategoryId = 2,
                            CoverImageUrl = "Assets/2ef1ef06a27bf5cd68fea90a24cc96dd.jpg",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A heartwarming romance set in the bustling streets of New York City.",
                            Price = 12.99m,
                            Status = 1,
                            Title = "Love in the City",
                            TotalChapters = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Dr. Michael Chen",
                            CategoryId = 3,
                            CoverImageUrl = "Assets/3398eb12b32fa930e105e701b708bc9a.jpg",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "An epic science fiction adventure exploring the boundaries of space and time.",
                            Price = 18.99m,
                            Status = 1,
                            Title = "Quantum Horizons",
                            TotalChapters = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            BookId = 4,
                            Author = "James Blackwood",
                            CategoryId = 4,
                            CoverImageUrl = "Assets/5cb878e981ec841cf8963c2dbfc837c3.jpg",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A gripping mystery thriller following Detective Morgan through the darkest corners of the city.",
                            Price = 14.99m,
                            Status = 1,
                            Title = "The Shadow Detective",
                            TotalChapters = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            BookId = 5,
                            Author = "Adventure Kelly",
                            CategoryId = 5,
                            CoverImageUrl = "Assets/65b07f0ccb5631d4025d509c0c14e62d.jpg",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "An thrilling adventure story of climbing the world's most dangerous peaks.",
                            Price = 16.99m,
                            Status = 1,
                            Title = "Mountain Quest",
                            TotalChapters = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            BookId = 6,
                            Author = "Aria Dragonheart",
                            CategoryId = 1,
                            CoverImageUrl = "Assets/6a81c3d24a73711e02ba8593c067bccf.jpg",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "The epic tale of the last dragon rider and their quest to save the realm.",
                            Price = 19.99m,
                            Status = 1,
                            Title = "Dragon's Legacy",
                            TotalChapters = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            BookId = 7,
                            Author = "Luna Starfield",
                            CategoryId = 2,
                            CoverImageUrl = "Assets/9a321b2c38deed11aa8fb0e879cc6610.jpg",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A cosmic romance spanning galaxies and defying the laws of physics.",
                            Price = 13.99m,
                            Status = 1,
                            Title = "Starbound Lovers",
                            TotalChapters = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            BookId = 8,
                            Author = "Prof. Alexandra Time",
                            CategoryId = 3,
                            CoverImageUrl = "Assets/c879fb508a3217ace62142bf6f7b72c1.jpg",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A mind-bending sci-fi thriller about time travel and its consequences.",
                            Price = 17.99m,
                            Status = 1,
                            Title = "Time Paradox",
                            TotalChapters = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            BookId = 9,
                            Author = "Rebecca Stone",
                            CategoryId = 4,
                            CoverImageUrl = "Assets/e19d44be068aeef341ef687ce43ce5a3.jpg",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "An ancient code holds the key to preventing a global catastrophe.",
                            Price = 15.99m,
                            Status = 1,
                            Title = "The Lost Cipher",
                            TotalChapters = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            BookId = 10,
                            Author = "Captain Marina Blue",
                            CategoryId = 5,
                            CoverImageUrl = "Assets/e3c33ed5f3d5d99567ae20bd138aa913.jpg",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Dive into the deepest mysteries of the ocean in this underwater adventure.",
                            Price = 14.99m,
                            Status = 1,
                            Title = "Ocean Explorer",
                            TotalChapters = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            BookId = 11,
                            Author = "Merlin Wiseheart",
                            CategoryId = 1,
                            CoverImageUrl = "Assets/f0e51f4a153d25e0438d429892ac8fa6.jpg",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A young apprentice discovers hidden powers and ancient magical secrets.",
                            Price = 16.99m,
                            Status = 1,
                            Title = "The Wizard's Apprentice",
                            TotalChapters = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            BookId = 12,
                            Author = "Scarlett Dreams",
                            CategoryId = 2,
                            CoverImageUrl = "Assets/f4c232745d79b53ac510d102a347fb4b.jpg",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A passionate love story that blooms under the moonlit sky.",
                            Price = 11.99m,
                            Status = 1,
                            Title = "Midnight Romance",
                            TotalChapters = 0,
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("LibraryDesktop.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Fantasy",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Fantasy stories and novels",
                            IsActive = true
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Romance",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Romance stories and novels",
                            IsActive = true
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Sci-Fi",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Science fiction stories",
                            IsActive = true
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Mystery",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Mystery and thriller stories",
                            IsActive = true
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Adventure",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Adventure stories",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("LibraryDesktop.Models.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChapterTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("GitHubContentUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ChapterId");

                    b.HasIndex("BookId", "ChapterNumber")
                        .IsUnique();

                    b.ToTable("Chapters", (string)null);

                    b.HasData(
                        new
                        {
                            ChapterId = 1,
                            BookId = 1,
                            ChapterNumber = 1,
                            ChapterTitle = "The Mysterious Path",
                            GitHubContentUrl = "https://github.com/example/enchanted-forest/chapter1.md",
                            PublishedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ChapterId = 2,
                            BookId = 1,
                            ChapterNumber = 2,
                            ChapterTitle = "Meeting the Guardian",
                            GitHubContentUrl = "https://github.com/example/enchanted-forest/chapter2.md",
                            PublishedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ChapterId = 3,
                            BookId = 2,
                            ChapterNumber = 1,
                            ChapterTitle = "First Encounter",
                            GitHubContentUrl = "https://github.com/example/love-city/chapter1.md",
                            PublishedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ChapterId = 4,
                            BookId = 3,
                            ChapterNumber = 1,
                            ChapterTitle = "The Quantum Discovery",
                            GitHubContentUrl = "https://github.com/example/quantum-horizons/chapter1.md",
                            PublishedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("LibraryDesktop.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentToken")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("QrCodeData")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PaymentId");

                    b.HasIndex("PaymentToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("LibraryDesktop.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RatingValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Review")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RatingId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId", "BookId")
                        .IsUnique();

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("LibraryDesktop.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "demo@library.com",
                            PasswordHash = "Z4m0WAouR0CZpMn4ZqNX0nnr8+bfEkfV7J0Ps7umRjE=",
                            RegistrationDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "demo"
                        });
                });

            modelBuilder.Entity("LibraryDesktop.Models.UserFavorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FavoriteId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId", "BookId")
                        .IsUnique();

                    b.ToTable("UserFavorites", (string)null);
                });

            modelBuilder.Entity("LibraryDesktop.Models.UserSetting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("FontSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ThemeMode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SettingId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings", (string)null);

                    b.HasData(
                        new
                        {
                            SettingId = 1,
                            Balance = 100.00m,
                            FontSize = 12,
                            ThemeMode = 0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("LibraryDesktop.Models.Book", b =>
                {
                    b.HasOne("LibraryDesktop.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryDesktop.Models.Chapter", b =>
                {
                    b.HasOne("LibraryDesktop.Models.Book", "Book")
                        .WithMany("Chapters")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryDesktop.Models.Payment", b =>
                {
                    b.HasOne("LibraryDesktop.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryDesktop.Models.Rating", b =>
                {
                    b.HasOne("LibraryDesktop.Models.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryDesktop.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryDesktop.Models.UserFavorite", b =>
                {
                    b.HasOne("LibraryDesktop.Models.Book", "Book")
                        .WithMany("Favorites")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryDesktop.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryDesktop.Models.UserSetting", b =>
                {
                    b.HasOne("LibraryDesktop.Models.User", "User")
                        .WithOne("UserSetting")
                        .HasForeignKey("LibraryDesktop.Models.UserSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryDesktop.Models.Book", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Favorites");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("LibraryDesktop.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryDesktop.Models.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Payments");

                    b.Navigation("Ratings");

                    b.Navigation("UserSetting");
                });
#pragma warning restore 612, 618
        }
    }
}
